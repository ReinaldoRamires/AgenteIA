# agents/decision_supporter.py
import google.generativeai as genai
from rich.console import Console
from src import models

console = Console()

class DecisionSupporter:
    """
    Usa IA para analisar cen√°rios de "what-if" e trade-offs para apoiar a tomada de decis√£o.
    """
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash-latest')
        console.print("‚úÖ [Decision Supporter] Inicializado.")

    def analyze_trade_offs(self, project: models.Project, decision: str) -> str:
        """
        Analisa os pr√≥s, contras e riscos de uma decis√£o estrat√©gica.
        """
        console.print(f"ü§î [Decision Supporter] Analisando a decis√£o: '{decision}'...")

        prompt = f"""
            Aja como um Consultor de Estrat√©gia S√™nior.
            Para um projeto chamado "{project.name}", do tipo "{project.project_type}", 
            a equipe est√° considerando a seguinte decis√£o estrat√©gica: "{decision}".

            Fa√ßa uma an√°lise de trade-offs em formato Markdown, incluindo:
            1.  **Pr√≥s:** Liste 2 a 3 potenciais benef√≠cios ou vantagens de tomar essa decis√£o.
            2.  **Contras:** Liste 2 a 3 potenciais desvantagens ou custos.
            3.  **Riscos Associados:** Identifique o principal risco que essa decis√£o introduz.
            4.  **Recomenda√ß√£o Final:** D√™ uma recomenda√ß√£o concisa (ex: "Recomendado com ressalvas", "N√£o recomendado nesta fase", "Recomendado").
        """

        with console.status("[bold yellow]Aguardando IA analisar os trade-offs...[/bold yellow]"):
            response = self.model.generate_content(prompt)

        console.print("ü§î [Decision Supporter] An√°lise conclu√≠da!")
        return response.text