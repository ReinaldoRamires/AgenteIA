# agents/market_intel_bot.py
import google.generativeai as genai
from rich.console import Console
import json

console = Console()

class MarketIntelBot:
    """
    Usa a API do Google Gemini para realizar an√°lises de mercado.
    """
    def __init__(self, api_key: str):
        if not api_key or "SUA_CHAVE" in api_key:
            raise ValueError("A chave de API do Google Gemini √© obrigat√≥ria.")
        genai.configure(api_key=api_key)
        # AQUI EST√Å A CORRE√á√ÉO: Usando um modelo mais recente.
        self.model = genai.GenerativeModel('gemini-1.5-flash-latest')
        console.print("‚úÖ [Market Intel Bot] Conex√£o com a API do Google Gemini estabelecida.")

    def analyze_market_potential(self, project_name: str, project_type: str) -> dict:
        """
        Gera uma an√°lise de potencial de mercado (TAM, SAM, SOM) para um projeto.
        """
        console.print(f"ü§ñ [Market Intel Bot] Analisando potencial de mercado para: [bold green]{project_name}[/bold green]...")

        prompt = f"""
            Aja como um analista de neg√≥cios s√™nior.
            Para um projeto chamado "{project_name}", que √© do tipo "{project_type}", estime o seguinte:
            1.  **TAM (Total Addressable Market):** O mercado total para essa solu√ß√£o.
            2.  **SAM (Serviceable Available Market):** A fatia do mercado que podemos realisticamente alcan√ßar com nossos canais.
            3.  **SOM (Serviceable Obtainable Market):** A por√ß√£o do SAM que podemos capturar no curto/m√©dio prazo.

            Forne√ßa uma breve justificativa para cada estimativa.

            Responda APENAS com um objeto JSON v√°lido, sem nenhum texto adicional antes ou depois.
            O formato do JSON deve ser:
            {{
              "tam": {{ "value": "...", "justification": "..." }},
              "sam": {{ "value": "...", "justification": "..." }},
              "som": {{ "value": "...", "justification": "..." }}
            }}
        """

        try:
            with console.status("[bold yellow]Aguardando resposta da IA...[/bold yellow]", spinner="dots"):
                response = self.model.generate_content(prompt)
            
            cleaned_response = response.text.strip().replace("```json", "").replace("```", "")
            
            analysis = json.loads(cleaned_response)
            console.print("ü§ñ [Market Intel Bot] An√°lise recebida com sucesso!")
            return analysis

        except Exception as e:
            console.print(f"[bold red]ERRO ao chamar a API do Gemini:[/bold red] {e}")
            raise