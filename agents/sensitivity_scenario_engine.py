# agents/sensitivity_scenario_engine.py
import google.generativeai as genai
from rich.console import Console

from src import models

console = Console()


class SensitivityScenarioEngine:
    """
    Usa IA para criar anÃ¡lises de cenÃ¡rio (otimista, pessimista) para um modelo financeiro.
    """

    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("gemini-1.5-flash-latest")
        console.print("âœ… [Sensitivity Scenario Engine] Inicializado.")

    def analyze_scenarios(self, project: models.Project) -> str:
        """
        Gera uma anÃ¡lise de sensibilidade financeira.
        """
        console.print(
            f"ğŸ“‰ğŸ“ˆ [Sensitivity Engine] Analisando cenÃ¡rios para: [bold green]{project.name}[/bold green]..."
        )

        prompt = f"""
            Aja como um Analista de Risco Financeiro.
            Para um projeto chamado "{project.name}", do tipo "{project.project_type}", 
            crie uma anÃ¡lise de sensibilidade com dois cenÃ¡rios: Otimista e Pessimista.

            Para cada cenÃ¡rio, descreva brevemente:
            1.  **As premissas que mudam:** (ex: "AdoÃ§Ã£o de usuÃ¡rios 50% mais rÃ¡pida", "Custo de aquisiÃ§Ã£o 30% maior").
            2.  **O impacto no VPL (Valor Presente LÃ­quido):** Estime qualitativamente o impacto (ex: "Aumento substancial", "ReduÃ§Ã£o significativa").
            3.  **O impacto no Payback:** Estime se o payback seria mais rÃ¡pido ou mais lento.

            Responda em formato Markdown, com um tÃ­tulo para cada cenÃ¡rio.
        """

        with console.status(
            "[bold yellow]Aguardando IA analisar os cenÃ¡rios...[/bold yellow]"
        ):
            response = self.model.generate_content(prompt)

        console.print("ğŸ“‰ğŸ“ˆ [Sensitivity Engine] AnÃ¡lise de cenÃ¡rios concluÃ­da!")
        return response.text
